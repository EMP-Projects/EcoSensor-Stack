services:
  ecosensor-db:
    container_name: ecosensor-db
    image: ghcr.io/emp-projects/docker-postgis:main
    profiles: ["all", "db"]
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
    ports:
      - 15432:${POSTGRES_PORT}
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: always
    networks:
      - ecosensor-network
    volumes:
      - ./ecosensor-data/db:/var/lib/postgresql

  ecosensor-osm2pgsql:
    container_name: ecosensor-osm2pgsql
    image: ghcr.io/emp-projects/docker-osm2pgsql:main
    profiles: ["all", "db"]
    depends_on:
      ecosensor-osm2pg-db:
        condition: service_healthy
    restart: always
    environment:
      PGHOST: ${POSTGRES_OSM_HOST}
      PGDATABASE: ${POSTGRES_OSM_DB}
      PGUSER: ${POSTGRES_OSM_USER}
      PGPASSWORD: ${POSTGRES_OSM_PASS}
      PGPORT: ${POSTGRES_OSM_PORT}
    volumes:
      - ./osm-data/osm:/osm
    networks:
      - ecosensor-network
  
  # https://hub.docker.com/r/postgis/postgis/
  ecosensor-osm2pg-db:
    container_name: ecosensor-osm2pg-db
    image: postgis/postgis:16-3.4
    profiles: ["all", "db"]
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGPORT: ${POSTGRES_OSM_PORT}
      POSTGRES_DB: ${POSTGRES_OSM_DB}
      POSTGRES_USER: ${POSTGRES_OSM_USER}
      POSTGRES_PASSWORD: ${POSTGRES_OSM_PASS}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
    ports:
      - 15433:${POSTGRES_OSM_PORT}
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_OSM_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_OSM_USER} -d ${POSTGRES_OSM_DB} -p ${POSTGRES_OSM_PORT}"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: on-failure
    networks:
      - ecosensor-network
    volumes:
      - ./osm-data/db:/var/lib/postgresql

  ecosensor-open-meteo-api:
    image: ghcr.io/open-meteo/open-meteo
    container_name: ecosensor-openmeteo-api
    profiles: ["all", "db"]
    ports:
      - ${OPEN_METEO_PORT}:8080
    command: serve
    volumes:
      - ./openmeteo-data/openmeteo:/app/data
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}

  ecosensor-open-meteo-sync:
    image: ghcr.io/open-meteo/open-meteo
    container_name: ecosensor-openmeteo-sync
    profiles: ["all", "db"]
    command: sync ${OPEN_METEO_MODELS} ${OPEN_METEO_VARIABLES} --past-days ${OPEN_METEO_MAX_AGE_DAYS} --repeat-interval ${OPEN_METEO_REPEAT_INTERVAL} --concurrent ${OPEN_METEO_CONCURRENT}
    volumes:
      - ./openmeteo-data/openmeteo:/app/data
    restart: always
    networks:
      - ecosensor-network
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
        
  ecosensor-istat-db:
    container_name: ecosensor-istat-db
    profiles: ["all", "db"]
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGPORT: ${POSTGRES_ISTAT_PORT}
      POSTGRES_DB: ${POSTGRES_ISTAT_DB}
      POSTGRES_USER: ${POSTGRES_ISTAT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ISTAT_PASS}
    ports:
      - 15434:${POSTGRES_ISTAT_PORT}
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_ISTAT_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_ISTAT_USER} -d ${POSTGRES_ISTAT_DB} -p ${POSTGRES_ISTAT_PORT}"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: on-failure
    networks:
      - ecosensor-network
    volumes:
      - ./istat-data/db:/var/lib/postgresql

  ecosensor-istat-ogr2ogr:
    container_name: ecosensor-istat-import
    profiles: ["all", "db"]
    image: ghcr.io/emp-projects/docker-istat:main
    depends_on:
      ecosensor-istat-db:
        condition: service_healthy
    environment:
        PGPORT: ${POSTGRES_ISTAT_PORT}
        PGHOST: ${POSTGRES_ISTAT_HOST}
        PGDB: ${POSTGRES_ISTAT_DB}
        PGUSER: ${POSTGRES_ISTAT_USER}
        PGPWD: ${POSTGRES_ISTAT_PASS}
    networks:
        - ecosensor-network

  ecosensor-backend:
    container_name: ecosensor-backend
    image: ghcr.io/emp-projects/ecosensor:master
    profiles: ["all"]
    restart: always
    environment:
      POSTGRES_OSM_HOST: ${POSTGRES_OSM_HOST}
      POSTGRES_OSM_DB: ${POSTGRES_OSM_DB}
      POSTGRES_OSM_USER: ${POSTGRES_OSM_USER}
      POSTGRES_OSM_PASS: ${POSTGRES_OSM_PASS}
      POSTGRES_OSM_PORT: ${POSTGRES_OSM_PORT}
      ECOSENSOR_OPENMETEO_API: ${ECOSENSOR_OPENMETEO_API}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      AWS_TOPIC_ARN: ${AWS_TOPIC_ARN}
      POSTGRES_ISTAT_HOST: ${POSTGRES_ISTAT_HOST}
      POSTGRES_ISTAT_PORT: ${POSTGRES_ISTAT_PORT}
      POSTGRES_ISTAT_DB: ${POSTGRES_ISTAT_DB}
      POSTGRES_ISTAT_USER: ${POSTGRES_ISTAT_USER}
      POSTGRES_ISTAT_PASS: ${POSTGRES_ISTAT_PASS}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${ECOSENSOR_PORT}:80
    depends_on:
      ecosensor-db:
        condition: service_healthy
      ecosensor-osm2pg-db:
        condition: service_healthy
      ecosensor-istat-db:
        condition: service_healthy
    networks:
      - ecosensor-network

networks:
  ecosensor-network:
    name: ecosensor
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.1.0/24

volumes:
  db:
    driver: local
